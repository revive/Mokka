
                             ===================

What is new in this Mokka release 
=================================
 
  I. Exporting detector geometry in VRML files

 II. New implementation of hybrid Silicon - Scintillator Ecal

III. Bug fix in VXD03.

 IV. Change in Mokka/source/Kernel/GNUmakefile

  V. New implementation for BeamCal

===============================================================================

Please note that:

1. This Mokka release co-works with Geant4 9.3 and CLHEP 2.0.4.5
   (but it is still compatible with previous Geant4 / CLHEP versions)
   It was tested against the latest versions of GEAR (v00-13) and
   LCIO (v01-11).
   gcc 3.2.3, gcc 3.4.5 or
   gcc 4.1.1, SL3 or SL4

===============================================================================


I. Exporting detector geometry in VRML files

   To export all the detector geometry or a given subdetector in VRML
format can be useful to create pdf 3D files or exporting it to EDMS
systems, to compare simulated geometries with the CAD designs. For that, 
a new visualization command is now available in Mokka:

   /Mokka/Visu/Detector/DumpVRML

   Be careful: this command erases the g4_00.wrl and the VRML directory 
in the current directory, it exists, and creates a new empty one.

   Without parameters, it dumps all subdetectors being part of the current 
model, one ".wrl" file per subdetector, which are written in the VRML 
directory. 


   This command is also able to dump just a given sub-detector, with the 
syntax:
   
   /Mokka/Visu/Detector/DumpVRML detector-class

  where 
  detector-class = "vxd", "tpc", "ecal", "hcal", etc.

   In this case only one file ".wrl" will be created in the VRML 
directory.

 Remarks concerning the VRML code generated by this command: the default 
unit in VRML files is meter. The Geant4 VRML driver don't care about it
and write the values in mm. To fix this bug this command inserts on the fly,
for each file, a transform node to rescale from mm to m. So, normally,
the VRML files generated by this command complain with the VRML standards.


 II. New implementation of hybrid Silicon - Scintillator Ecal

A new Ecal driver is now available that can implement hybrid technology 
(Silicon and Scintillator), as well as "all silicon" and "all scintillator" 
sensitive layers. This technology is specified by a global model parameter
named "Ecal_Sc_Si_mix". This parameter is a set of numbers - one for every 
layer pair - that can each have the following values: 

 - 0 - both layers are made of silicon

 - 1 - both layers have scintillator strips oriented longitudinally in the slab 
       (along the larger dimension of the slab)

 - 2 - both layers have scintillator strips oriented transverse to the slab 
       (along the smaller dimension of the slab)

 - 3 - the first layer has scintillator strips oriented longitudinally in the i
       slab (along the larger dimension of the slab)
     - the second layer has scintillator strips oriented transverse to the slab 
       (along the smaller dimension of the slab)

 - 4 - the first layer has scintillator strips oriented transverse to the slab 
       (along the smaller dimension of the slab)
     - the second layer has scintillator strips oriented longitudinally in the 
       slab (along the larger dimension of the slab)

The default value of this parameter in the DB is 'all zeroes' - 'all silicon 
Ecal'.  It can be changed, for example, with the steering command:

/Mokka/init/globalModelParameter    Ecal_Sc_Si_mix 333333333333333

The version 'all silicon' is exactly the same as before.

The scintillator strips version uses the same geometry as the 'all silicon' 
version: the same shapes and dimensions of barrel and endcap modules, towers. 
Only the 'H structures' are filled with different sensitive materials and 
connected ingredients (the scintillator layers have no 'ground' and glue 
layers, for example). 

Each 'H structure' has two slabs that are the same (either both silicon or both 
scintillator - even if the scintillator layers can be oriented differently), as 
shown above.

The scintillator strips are made of polystyrene and are coated by a reflector 
film made of G4_MYLAR. The MPPC's are also implemented, and are made of 
polystyrene.

The parameters connected to the scintillator version and their default values 
are:

   - Ecal_Sc_thickness = 2.0
   - Ecal_Sc_reflector_thickness = 0.057
   - Ecal_Slab_Sc_PCB_thickness = 0.8
   - Ecal_Sc_MPPC_breadth = 2.5
   - Ecal_MPPC_size = 0.91
   - Ecal_Sc_N_strips_across_module = 4
   - Ecal_Sc_number_of_virtual_cells = 9
 
   - Ecal_Sc_Si_mix = 000000000000000

Both the Barrel and EndCaps use the same 'Ecal_Sc_Si_mix' parameter, so they 
will have exactly the same combination of sensitive layers.

Separate hit collections are created for silicon and scintillator. For 
scintillator there are also two hit collections: one for longitudinal strips 
and one for transverse strips, since the meaning of the 'cell' indices is 
different and the treatment - corrections - depend on the direction - along 
strips or transverse to the strips.  There is also a 'PreShower' collection, 
associated to layer number one in Barrel and EndCap modules.


III. Bug fix in VXD03.

 Thanks to Rita De Masi, a bug was corrected in VXD03 (file SVxd03.cc). The 
 thickness of the ladder support for the double layer now corresponds to the 
 value in the database. 


 IV. Change in Mokka/source/Kernel/GNUmakefile

 Thanks to Jan Engels, Mokka is now able to be linked against libdcap when 
 lcio is built with dcap.


  V. New implementation for BeamCal

  Andr√© Sailer has rewritten the BeamCal sub-detector driver for Mokka to 
change the geometry of the tungsten plates, graphite absorber and pair 
monitor, so that they only have holes for the two beam pipes. The sensors 
remain unchanged. The new driver name is BeamCal01, which co-works with
the new BeamCalSD01 sensitive detector.

  For more details, please have a look at the description of the new 
geometry/driver 

  http://sailer.web.cern.ch/sailer/beamcal/newBeamCal.pdf


