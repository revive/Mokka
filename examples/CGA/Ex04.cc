/*
      *******************************************************
      *                                                     *
      *                      Mokka                          * 
      *   - the detailed geant4 simulation for Tesla -      *
      *                                                     *
      * For more information about Mokka, please, go to the *
      *                                                     *
      *  polype.in2p3.fr/geant4/tesla/www/mokka/mokka.html  *
      *                                                     *
      *    Mokka home page.                                 *
      *                                                     *
      *******************************************************
      
       $Id: Ex04.cc,v 1.4 2006/05/23 11:42:08 musat Exp $
       $Name: mokka-07-00 $
      
       History
       first implementation for the 
       Mokka Common Geometry Access (CGA) by 
       Gabriel Musat (musat@poly.in2p3.fr), March 2003
      
       see CGA documentation at 
       http://polype.in2p3.fr/geant4/tesla/www/mokka/
              software/doc/CGADoc/CGAIndex.html
      -------------------------------------------------------
*/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "CGADefs.h"

#include "lcio.h"
#include "IO/LCReader.h"
#include "EVENT/LCRunHeader.h"

#include "IMPL/LCTOOLS.h"
#include "EVENT/LCCollection.h"
#include "EVENT/SimCalorimeterHit.h"
#include "EVENT/CalorimeterHit.h"
#include "EVENT/SimTrackerHit.h"
#include "EVENT/TPCHit.h"
#include "EVENT/LCIO.h"
#include "EVENT/MCParticle.h"
#include "DATA/LCFloatVec.h"
#include "DATA/LCIntVec.h"

#include "IMPL/LCFlagImpl.h"

using namespace std ;
using namespace EVENT ;
using namespace DATA ;

// this example reads an lcio file generated by Mokka 
// and uses the CGA interface to get the cell center 
// coordinates for every hit
// see http://www-it.desy.de/physics/projects/simsoft/lcio)
// this example was built according to the LCTools example

static const char* FILEN = "recjob.slcio" ; // default file name

using namespace std ;
using namespace lcio ;


int main(int argc, char** argv) {

// build the same detector model that the one used
// by Mokka to generate the LCIO file
	if( argc > 1 ) {
		FILEN = argv[1] ;
	}

	LCReader* lcReader = LCFactory::getInstance()->createLCReader() ;

    // first we read the run information
	lcReader->open( FILEN ) ;

	LCRunHeader *runHdr ;

	try{

		// loop over all run headers
		while( ( runHdr = lcReader->readNextRunHeader() ) != 0 ){

		CGAInit(
			runHdr->parameters().
			getStringVal("MOKKA_SteeringFile").c_str(),
			runHdr->getDetectorName().c_str(), "", "", "", ""
			);

		cout << "  Run : " << runHdr->getRunNumber()
		<< " - "      << runHdr->getDetectorName()
		<< ":  "      << runHdr->getDescription()  << endl ;
		}

	}catch(IOException& e){
		cout << " io error when reading run data : " << e.what() << endl ;
	}
	cout << endl ;

	lcReader->close() ;

	// now loop over the file again and dump event data
	
	lcReader->open( FILEN ) ;
	cout << " reopened " << FILEN << " for reading " << endl ;

	LCEvent* evt ;

	int nEvents = 0 ;

	//----------- the event loop -----------
	while( (evt = lcReader->readNextEvent()) != 0 ) {
		const std::vector< std::string >* strVec = evt->getCollectionNames() ;
		std::vector< std::string >::const_iterator name ;
		for( name = strVec->begin() ; name != strVec->end() ; name++){
			
			LCCollection* col = evt->getCollection( *name ) ;
			cout << endl << " collection name : " << *name
				<< endl ;
// CGACellID is to be used only with calorimeter hits
			if(evt->getCollection( *name )->getTypeName() 
					== LCIO::SIMCALORIMETERHIT ){

			   LCFlagImpl flag( col->getFlag() ) ;
			   int nPrint =  col->getNumberOfElements() ;
// use the collection flag to set the right sensitive detector
			   CGASetSD(flag.getFlag());
			   for( int i=0 ; i< nPrint ; i++ ){
				   SimCalorimeterHit* hit =
					  dynamic_cast<SimCalorimeterHit*>( 
						col->getElementAt( i ) ) ;
				   cout << "Hit no: " << i 
					   << " pos from file: (" ;
				   cout << hit->getPosition()[0] << ", "
					<< hit->getPosition()[1]<< ", "
					<< hit->getPosition()[2] << ") | ";
				   int id0 = hit->getCellID0() ;
				   int id1 = hit->getCellID1() ;
// use the CellID0 to get the cell center coordinates
				   cell_ids indices;
				   indices.id0 = id0;
				   indices.id1 = id1;
				   cell_info result  = 
					   CGACellIndex(indices);
				   cout << " pos from CGA: (" << 
					   result.X << ", " << 
					   result.Y << ", " << 
					   result.Z << "); Guard-ring zone: " 
					   << result.GRZone << endl;
			   }

			}
			
		}
		nEvents ++ ;
	}

	cout << endl <<  "  " <<  nEvents << " events read from file : " << FILEN << endl << endl ;

	lcReader->close();

	return 0;
}
